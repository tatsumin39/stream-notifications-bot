import dotenv from "dotenv";
dotenv.config();

import {
  Client,
  GatewayIntentBits,
  Partials,
  ChannelType,
} from "discord.js";
import { getLiveData, getUpcomingData } from "../database/videoData.js";
import { handleSetReminder } from "./reminderInteractions.js";
import { searchReminders } from "../database/reminderModel.js";
import { scheduleReminder } from "../reminders/schedule.js";
import { formatDate } from "../utils/formatDate.js";
import { executeQuery } from "../database/executeQuery.js";
import { formatResultsAsTable } from "../utils/formatResultsAsTable.js";
import { parseMessageToQuery } from "../database/queryParser.js";

const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;
const ADMIN_USER_ID = process.env.ADMIN_USER_ID;
const REMINDER_RECHECK_INTERVAL = process.env.REMINDER_RECHECK_INTERVAL || 10;
const MESSAGE_DELETE_TIMEOUT = process.env.MESSAGE_DELETE_TIMEOUT || 180000;

// Discord„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions,
  ],
  partials: [Partials.Message, Partials.Channel, Partials.Reaction],
});

/**
 * Discord Bot„ÅÆÂàùÊúüÂåñ„Å®„É™„Éû„Ç§„É≥„ÉÄ„ÉºÂÜç„Çπ„Ç±„Ç∏„É•„Éº„É´„ÇíÂá¶ÁêÜ„Åó„Åæ„Åô„ÄÇ
 */
client.once("ready", async () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}!`);

  try {
    const remindersToReschedule = await searchReminders({
      scheduled: true,
      executed: false,
      withinNextMinutes: REMINDER_RECHECK_INTERVAL,
    });

    for (const reminder of remindersToReschedule) {
      const user = await client.users.fetch(reminder.user_id);

      if (!user) {
        console.warn(`‚ö†Ô∏è User not found: ${reminder.user_id}`);
        continue;
      }

      const reminderTime = new Date(reminder.reminder_time);
      if (reminderTime <= Date.now()) {
        console.log(`‚è© Skipped past reminder time: ${reminderTime}`);
        continue;
      }

      await scheduleReminder({
        userId: reminder.user_id,
        messageContent: reminder.message_content,
        reminderId: reminder.id,
        reminderTime,
      });
      console.info(`üîÑ „É™„Éû„Ç§„É≥„ÉÄ„Éº„ÇíÂÜç„Çπ„Ç±„Ç∏„É•„Éº„É´„Åó„Åæ„Åó„Åü„ÄÇ : reminder ID: ${reminder.id}`);
    }
  } catch (error) {
    console.error("‚õîÔ∏è Error rescheduling reminders:", error);
  }
});

/**
 * „É°„ÉÉ„Çª„Éº„Ç∏„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅåËøΩÂä†„Åï„Çå„ÅüÈöõ„Å´„É™„Éû„Ç§„É≥„ÉÄ„Éº„ÇíË®≠ÂÆö„Åó„Åæ„Åô„ÄÇ
 */
client.on("messageReactionAdd", async (reaction, user) => {
  if (reaction.partial) {
    try {
      await reaction.fetch();
    } catch (error) {
      console.error("‚õîÔ∏è Failed to fetch reaction:", error);
      return;
    }
  }
  if (user.bot) return;

  if (reaction.emoji.name === "remind") {
    try {
      await handleSetReminder(user, reaction.message.content);
    } catch (error) {
      console.error("‚õîÔ∏è Error handling set reminder:", error);
    }
  }
});

/**
 * „Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„Éâ„Å´Âøú„Åò„Å¶„É©„Ç§„ÉñÊÉÖÂ†±„ÇÑ„É™„Éû„Ç§„É≥„ÉÄ„Éº„É™„Çπ„Éà„ÇíËøî„Åó„Åæ„Åô„ÄÇ
 */
client.on("interactionCreate", async (interaction) => {
  if (!interaction.isCommand()) return;

  try {
    const { commandName } = interaction;

    if (commandName === "live") {
      const liveVideos = await getLiveData();
      if (liveVideos.length === 0) {
        await interaction.reply({ content: "ÁèæÂú®„É©„Ç§„ÉñÈÖç‰ø°„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ", ephemeral: true });
      } else {
        for (const video of liveVideos) {
          const url = `https://www.youtube.com/watch?v=${video.video_id}`;
          const message = `[${video.title}](${url})`;
          await interaction.followUp({ content: message, ephemeral: true });
        }
      }
    } else if (commandName === "upcoming") {
      const minutes = interaction.options.getInteger("minutes") || 15;
      const upcomingVideos = await getUpcomingData(minutes);
      if (upcomingVideos.length === 0) {
        await interaction.reply({ content: `${minutes}ÂàÜ‰ª•ÂÜÖ„Å´Âßã„Åæ„ÇãÈÖç‰ø°„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ`, ephemeral: true });
      } else {
        for (const video of upcomingVideos) {
          const formattedStartTime = formatDate(video.scheduled_start_time, "YYYY/MM/DD HH:mm");
          const url = `https://www.youtube.com/watch?v=${video.video_id}`;
          const message = `${formattedStartTime}„Åã„ÇâÈÖç‰ø°‰∫àÂÆöÔºÅ [${video.title}](${url})`;
          await interaction.followUp({ content: message, ephemeral: true });
        }
      }
    } else if (commandName === "reminderlist") {
      const userId = interaction.user.id;
      const reminders = await searchReminders({ executed: false, userId });
      if (reminders.length === 0) {
        await interaction.reply({ content: "Ë®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã„É™„Éû„Ç§„É≥„ÉÄ„Éº„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ", ephemeral: true });
      } else {
        for (const reminder of reminders) {
          const formattedReminderTime = formatDate(reminder.reminder_time, "YYYY/MM/DD HH:mm");
          const message = `‚è∞ „É™„Éû„Ç§„É≥„ÉÄ„ÉºÊôÇÂàª:${formattedReminderTime}\n${reminder.message_content}`;
          await interaction.followUp({ content: message, ephemeral: true });
        }
      }
    }
  } catch (error) {
    console.error("‚õîÔ∏è Error handling interaction:", error);
    await interaction.reply({ content: "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ", ephemeral: true });
  }
});

/**
 * DM„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂÜÖÂÆπ„ÇíËß£Êûê„Åó„Å¶„ÇØ„Ç®„É™„ÇíÂÆüË°å„Åó„Åæ„Åô„ÄÇ
 */
client.on("messageCreate", async (message) => {
  if (message.author.bot || message.channel.type !== ChannelType.DM || message.author.id !== ADMIN_USER_ID) return;

  const { query, params } = parseMessageToQuery(message.content);

  try {
    const sentMessage = await message.author.send(`Query:\n${query}\nParams:\n${params}`);
    setTimeout(() => sentMessage.delete().catch(console.error), MESSAGE_DELETE_TIMEOUT);

    if (query) {
      const result = await executeQuery(query, params);
      const formattedResult = formatResultsAsTable(result);
      const resultMessage = await message.author.send(`Results:\n${formattedResult}`);
      setTimeout(() => resultMessage.delete().catch(console.error), MESSAGE_DELETE_TIMEOUT);
    }
  } catch (error) {
    console.error("‚õîÔ∏è Error executing query:", error);
    const errorMessage = await message.author.send(`„Ç®„É©„Éº: ${error.message}`);
    setTimeout(() => errorMessage.delete().catch(console.error), MESSAGE_DELETE_TIMEOUT);
  }
});

// Discord Bot„Çí„É≠„Ç∞„Ç§„É≥
client.login(DISCORD_BOT_TOKEN);

// „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
export { client };
